# go1.24で追加予定のGeneric Type Aliasesとは？

23 Oct 2024

Tomoki Ota

http://qiita.jp/tomomon1227
https://speakerdeck.com/tomo1227

## Type Definition

新しい型を定義する。

    type Foo int

Fooという新しい型を作る。
Fooとintは別の全く別の型。

## Type Definitionの例

.play ../src/type_definition.go

## 型エイリアス

go1.9で追加された機能。

    type Foo = int

あくまでFooはint型のエイリアスなので、int型と同じ。新しい型を定義しているわけではない。

## 型エイリアスの例

Fooにint型を代入することができる。

.play ../src/type_ailas.go

## 型エイリアスの例2

    package oldpkg

    type User struct {
        ID   int
        Name string
    }

このパッケージを新しいパッケージに移動したい場合以下のようにする。

    package newpkg

    import "path/to/oldpkg"

    type User = oldpkg.User

newpkg.User と oldpkg.User は同じ型になる。

## Generic Type Aliases

Go1.18でジェネリクスが導入されたが、エイリアスでジェネリクスを使用することはできなかった。
**Generic Type Aliases** によって以下のようなジェネリクスを含むエイリアスがサポートされる。

## Generic Type Aliasesの例

Userがジェネリクスの場合を考える。

    package oldpkg

    type User[T any] struct {
        ID   T
        Name string
    }

Userを新しいnewpkgに移行する。

    package newpkg

    import "path/to/oldpkg"

    type User[T any] = oldpkg.User[T]

パッケージ間でジェネリクスを移動するときに完全な型の互換性を維持できる

## Generic Type Aliasesの注意

ジェネリクスの場合は以下のような書き方はできない。

    type User = oldpkg.User

## ジェネリクスマップ型

    type Map[K comparable, V any] mapImplementation

エイリアスの型パラメータの数は、エイリアスされた型の型パラメータの数と一致する必要はない。

    type Set[K comparable] = Map[K, bool]

## ジェネリクスマップ型

.play ../src/generic_type_aliases.go

[Go Playground](https://go.dev/play/p/db4RIhEpMRH?v=gotip)

## Generic Type Aliasesと型制約

    type integers interface{ ~int | ~int8 | ~int16 | ~int32 | ~int64 }
    type IntSet[K integers] = Set[K]

ジェネリクスのエイリアス型の型制約は、エイリアス型の制約と一致する必要はなく、 それらを満たすだけでいい。


## Generic Type Aliasesと型制約

.play ../src/type_constraints_generic.go

[Go Playground](https://go.dev/play/p/LiPwk770VhP?v=gotip)

## Generic Type Literals

型リテラルのエイリアス。

.play ../src/point3d.go

[Go Playground](https://go.dev/play/p/h7B2UHDfFAH?v=gotip)


古い書き方

    type Point2D = struct{ x, y int }
    
## 終わりに

Go 1.23 では、`GOEXPERIMENT=aliastypeparams` フラグを指定することで使用することができる。
Go 1.24からはデフォルトで使用可能となる予定。
